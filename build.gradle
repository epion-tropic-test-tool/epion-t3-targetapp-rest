plugins {
    id 'org.springframework.boot' version '2.1.3.RELEASE'
    id 'java'
}

apply plugin: 'io.spring.dependency-management'

apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'jacoco'
//apply plugin: "com.diffplug.gradle.spotless"

ext {
    extention = 'jar'
    set('springCloudVersion', 'Greenwich.RELEASE')
}

configurations {
    myBatisGenerator
}

group = 'com.zomu.t.epion.tropic.test.tool'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '1.8'

repositories {
    mavenCentral()
    maven { url 'https://repo.spring.io/milestone' }
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    // implementation 'org.flywaydb:flyway-core'
    implementation 'org.mybatis.spring.boot:mybatis-spring-boot-starter:2.0.0'
    implementation 'org.springframework.cloud:spring-cloud-starter-sleuth'
    // implementation 'org.springframework.session:spring-session-data-redis'
    compileOnly 'org.projectlombok:lombok'
    runtimeOnly 'org.springframework.boot:spring-boot-devtools'
    implementation 'mysql:mysql-connector-java'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'

    myBatisGenerator("org.mybatis.generator:mybatis-generator-core:1.3.7")
    myBatisGenerator("mysql:mysql-connector-java:5.1.46")
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

configurations {
    all {
        resolutionStrategy.cacheDynamicVersionsFor 0, 'seconds'
    }
}

jacoco {
    toolVersion = '0.8.2'
}

jar {
    archiveName = "${baseName}.${extention}"
}

test {
    reports.html.enabled = false
    testLogging {
        exceptionFormat 'full'
        info {
            events 'started', 'passed', 'skipped', 'failed'
        }
    }
}

// Javadoc Error Ignore
tasks.withType(Javadoc) {
    options.charSet = "UTF-8"
    options.encoding = "UTF-8"
    options.addBooleanOption("Xdoclint:none", true)
}

// Java Compile Config
tasks.withType(JavaCompile) {
    sourceCompatibility = '1.8'
    targetCompatibility = '1.8'
    it.options.encoding = 'UTF-8'
}

// JavaDoc Jar packaging
task packageJavadoc(type: Jar, dependsOn: javadoc) {
    from javadoc.destinationDir
}

// Source Jar Packaging
task packageSources(type: Jar, dependsOn: classes) {
    from sourceSets.main.allSource
}

//spotless {
//    java {
//        enforceCheck = false
//        licenseHeaderFile rootProject.file('./formatter/LICENSE')
//        eclipse().configFile rootProject.file('./formatter/formatter.xml')
//        ignoreErrorForPath('ssssss')
//        lineEndings 'UNIX'
//    }
//
    sourceSets {
        main {
            java {
                srcDir 'src/main/java'
                srcDir 'src-gen/main/java'
            }
            resources {
                srcDir 'src/main/resources'
                srcDir 'src-gen/main/resources'
            }
        }
    }
//}

task generateMyBatisCode(type: JavaExec) {
    classpath = configurations.myBatisGenerator
    main = 'org.mybatis.generator.api.ShellRunner'
    args = [
            '-configfile',
            "${project.file('generatorConfig.xml')}",
            '-overwrite'
    ]
}

//flyway {
//    url = 'jdbc:mysql://localhost:3307?useSSL=false'
//    user = 'root'
//    password = 'password'
//    schemas = ['workdb', 'sampledb']
//}

task flywayRelease {
    doLast {
        flywayRepair.execute()
        flywayMigrate.execute()
        flywayInfo.execute()
    }
}
generateMyBatisCode.group = 'mybatis generator'